#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var program = require('commander');
var quailEvaluate = require('../lib/quailEvaluate');
var quailDevelop = require('../lib/quailDevelop');
var quailGenerate = require('../lib/quailGenerate');

// `quail` command.
program
  .version('0.0.1')
  .description('Automated accessibility assessment runner.')
  .option('-R, --runner <runnerScript>', 'A <runnerScript> that will run the evaluation. Currently there exists \'default\' and \'wcag2\'.', 'default');

// `evaluate` sub-command.
program
  .command('evaluate <url>')
  .description('A <url> to test')
  .alias('eval')
  .option('-R, --runner <runnerScript>', 'A <runnerScript> that will run the evaluation. Currently there exists \'default\' and \'wcag2\'.', 'default')
  .option('-o, --output [outputDir]', 'An [outputDir] to write the analysis results to', validateOutputDirectory)
  .option('-c, --config [configFile]', 'A configuration file for the PhantomJS instance', validateFilePath)
  .action(function (url, cmd) {
    quailEvaluate.call(this, url, cmd);
  })
  .on('--help', function () {
    console.log('  Example:');
    console.log();
    console.log('    $ quail evaluate http://example.com');
    console.log('    $ quail evaluate http://example.com -R wcag2');
    console.log('    $ quail evaluate http://example.com -o analyses');
    console.log();
  });

// `develop` sub-command.
program
  .command('develop <assessmentName>')
  .description('The name of an assessment to load into a browser for development')
  .alias('dev')
  .option('-p, --port [port]', 'The port number of localhost to serve the development page from.', validateOptionPort, 8787)
  .action(function (assessmentName, cmd) {
    quailDevelop.call(this, assessmentName, cmd);
  })
  .on('--help', function () {
    console.log('  Example:');
    console.log();
    console.log('    $ quail develop aMustHaveTitle');
    console.log('    $ quail develop aMustHaveTitle -p 4444');
    console.log();
  });

// `generate` sub-command.
program
  .command('generate <assessmentName>')
  .description('Generate assessment test files for the named assessment.')
  .alias('gen')
  .action(function (assessmentName, cmd) {
    quailGenerate.call(this, assessmentName, cmd);
  })
  .on('--help', function () {
    console.log('  Example:');
    console.log();
    console.log('    $ quail generate aMustHaveTitle');
    console.log();
  })

program.parse(process.argv);

/**
 *
 */
function validateOptionPort (val) {
  val = parseInt(val);
  if (isNaN(val)) {
    console.error('Port must be a integer');
    process.exit(1);
  }
  return val;
}

/**
 *
 */
function validateOutputDirectory (val) {
  var stat;
  // If it is a directory, then use it.
  try {
    stat = fs.lstatSync(val);
    if (stat.isDirectory()) {
      debugger;
      return val;
    }
  }
  catch (error) {
    // Nothing to do here.
  }
  // Otherwise see if it's relative to the project. Make an assumption that paths
  // are relative to the ROOT of the project, hence the '..'.
  try {
    stat = fs.lstatSync(path.join(__dirname, '..', val));
    if (stat.isDirectory()) {
      debugger;
      return path.join(__dirname, '..', val);
    }
  }
  catch (error) {
    // Nothing to do here.
  }
  // If we got this far, then the val is not an existing directory.
  console.error('`' + val + '` is not an existing absolute or relative directory path.');
  process.exit(1);
}

/**
 * Validates the existence of a file.
 */
function validateFilePath (filepath) {
  var stat;
  // See if it's relative to the project. Make an assumption that paths
  // are relative to the ROOT of the project, hence the '..'.
  try {
    stat = fs.statSync(path.join(__dirname, '..', filepath));
    if (stat.isFile()) {
      debugger;
      return path.join(__dirname, '..', filepath);
    }
  }
  catch (error) {
    // Nothing to do here.
  }
  // Otherwise just use the given file path.
  try {
    stat = fs.statSync(filepath);
    if (stat.isFile()) {
      debugger;
      return filepath;
    }
  }
  catch (error) {
    // Nothing to do here.
  }
  // If we got this far, then the filepath is not an existing directory.
  console.error('`' + filepath + '` is not an existing absolute or relative file path.');
  process.exit(1);
}
